[{"/Users/pknipp/Desktop/repos/react-frontend-template/src/index.js":"1","/Users/pknipp/Desktop/repos/react-frontend-template/src/App.js":"2","/Users/pknipp/Desktop/repos/rotation/src/index.js":"3","/Users/pknipp/Desktop/repos/rotation/src/App.js":"4","/Users/pknipp/Desktop/repos/rotation/src/Dot.js":"5","/Users/pknipp/Desktop/repos/rotation/src/Line.js":"6","/Users/pknipp/Desktop/repos/rotation/src/Input.js":"7"},{"size":506,"mtime":1611765216984,"results":"8","hashOfConfig":"9"},{"size":64,"mtime":1611765000156,"results":"10","hashOfConfig":"9"},{"size":506,"mtime":1611765216984,"results":"11","hashOfConfig":"12"},{"size":11605,"mtime":1614468455286,"results":"13","hashOfConfig":"12"},{"size":345,"mtime":1614465040581,"results":"14","hashOfConfig":"12"},{"size":674,"mtime":1614261512469,"results":"15","hashOfConfig":"12"},{"size":277,"mtime":1614449066881,"results":"16","hashOfConfig":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s2inzs",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"oko4l6",{"filePath":"24","messages":"25","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/pknipp/Desktop/repos/react-frontend-template/src/index.js",[],"/Users/pknipp/Desktop/repos/react-frontend-template/src/App.js",[],"/Users/pknipp/Desktop/repos/rotation/src/index.js",[],["34","35"],"/Users/pknipp/Desktop/repos/rotation/src/App.js",["36","37","38","39","40","41"],"import React, { useState, useEffect } from \"react\";\nimport Dot from \"./Dot\";\nimport Input from \"./Input\";\nimport Line from \"./Line\";\n\nconst App = () => {\n    const [h, setH] = useState(0.5);\n    const [thsInput, setThsInput] = useState([\"\", \"\", \"\"]);\n    const [ths, setThs] = useState([0, 0, 0]);\n    const [momsInput, setMomsInput] = useState([\"1\", \"1\", \"1\"]);\n    const [moms, setMoms] = useState([1, 2, 2.5]);\n    const [omsInput, setOmsInput] = useState([\"\", \"\", \"\"]);\n    const [oms, setOms] = useState([0, 0, 0]);\n    const [omfs, setOmfs] = useState([0, 0, 0]);\n    const [Ls, setLs] = useState([0, 0, 0]);\n    const [om2, setOm2] = useState(0);\n    const [omf2, setOmf2] = useState(0);\n    const [L2, setL2] = useState(0);\n    const [K, setK] = useState(0);\n    // const [torques, setTorques] = useState([0, 0, 0]);\n    const [xyzs0, setXyzs0] = useState([]);\n    const [xyzs, setXyzs] = useState([]);\n    const [running, setRunning] = useState(false);\n    const [time, setTime] = useState(0);\n\n    const handlerTh = e => {\n        let xyOrZ = Number(e.target.name);\n        let th =  e.target.value;\n        let newThsInput = [...thsInput]\n        let newThs = [...ths];\n        if (th === '-' || th === '.' || th === '-.') {\n            newThsInput[xyOrZ] = th;\n        } else {\n            if (isNaN(Number(th))) return;\n            newThsInput[xyOrZ] = th;\n            newThs[xyOrZ] = Number(th);\n        }\n        setThsInput(newThsInput);\n        setThs(newThs);\n        let newXyzs = JSON.parse(JSON.stringify(xyzs0));\n        xyzs0.forEach((xyz, i) => {\n            newXyzs[i][0] = mult1(mult2(mult2(zRot(newThs[2]), xRot(newThs[1])),zRot(newThs[0])), xyz[0]);\n        });\n        setXyzs(newXyzs);\n    };\n    const handlerMom = e => {\n        let xyOrZ = Number(e.target.name);\n        let mom = e.target.value;\n        let newMomsInput = [...momsInput];\n        let newMoms = [...moms];\n        if (mom === '-' || mom === '.' || mom === '-.') {\n            newMomsInput[xyOrZ] = mom;\n        } else {\n            if (isNaN(Number(mom))) return;\n            newMomsInput[xyOrZ] = mom;\n            newMoms[xyOrZ] = Number(mom);\n        }\n        setMomsInput(newMomsInput);\n        setMoms(newMoms);\n    };\n\n    // matrix multiplication: arr1 * arr2\n    const mult2 = (arr1, arr2) => {\n        let arr3 = [];\n        for (let i = 0; i < 3; i++) {\n            let row = [];\n            for (let j = 0; j < 3; j++) {\n                let elem = 0;\n                for (let k = 0; k < 3; k++) elem += arr1[i][k] * arr2[k][j];\n                row.push(elem);\n            }\n            arr3.push(row);\n        }\n        return arr3;\n    }\n    // matrix multiplication: arr * vec\n    const mult1 = (arr, vec) => {\n        let vec2 = [];\n        for (let i = 0; i < 3; i++) {\n            let elem = 0;\n            for (let j = 0; j < 3; j++) elem += arr[i][j] * vec[j];\n            vec2.push(elem);\n        }\n        return vec2;\n    }\n    const zRot = th => {\n        let [c, s] = [Math.cos(th), Math.sin(th)];\n        return [[c, s, 0], [-s, c, 0], [0, 0, 1]];\n    }\n    const xRot = th => {\n        let [c, s] = [Math.cos(th), Math.sin(th)];\n        return [[1, 0, 0], [0, c, s], [0, -s, c]];\n    }\n\n    const nx = 700;\n    const ny = 700;\n    const nz = ny;\n    const d = 20;\n\n    // ODE-solver timestep, in ms\n    const dt = 50;\n\n    useEffect(() => {\n        const firstXyzs = []\n        for (let i = 0; i < 2; i++) {\n            let x = (-1 + 2 * i) * (nx / 4);\n            for (let j = 0; j < 2; j++) {\n                let y = (-1 + 2 * j) * (ny / 4);\n                for (let k = 0; k < 2; k++) {\n                    let z = (-1 + 2 * k) * (nz / 4)\n                    firstXyzs.push([[x, y, z], [i, j, k]]);\n                }\n            }\n        }\n        setXyzs0(firstXyzs);\n        let newXyzs = JSON.parse(JSON.stringify(firstXyzs));\n        firstXyzs.forEach((xyz, i) => {\n            newXyzs[i][0] = mult1(mult2(mult2(zRot(ths[2]), xRot(ths[1])),zRot(ths[0])), xyz[0]);\n        });\n        setXyzs(newXyzs);\n    }, []);\n\n    useEffect(() => {\n        let interval = null;\n        if (running) {\n            interval = setInterval(() => {\n                setTime(time + dt/1000);\n                nextThs();\n                let newXyzs = JSON.parse(JSON.stringify(xyzs0));\n                let iMin = 0;\n                let zMin = newXyzs[iMin][0][2];\n                xyzs0.forEach((xyz, i) => {\n                    newXyzs[i][0] = mult1(mult2(mult2(zRot(ths[2]), xRot(ths[1])),zRot(ths[0])), xyz[0]);\n                    newXyzs[i][2] = false;\n                    if (newXyzs[i][0][2] < zMin) {\n                        iMin = i;\n                        zMin = newXyzs[i][0][2];\n                    }\n                });\n                newXyzs[iMin][2] = true;\n                setXyzs(newXyzs);\n            }, dt);\n        } else if (!running && time !== 0) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [running, time, xyzs0]);\n\n    const Fs = ths => {\n        // Following was used for symmetric rotor.\n        // let Fs = [oms[0], 0, oms[2]];\n        let cs = [];\n        let ss = [];\n        for (const th of ths) {\n            cs.push(Math.cos(th));\n            ss.push(Math.sin(th));\n        };\n        let Fs = []\n        Fs[0] = h * (cs[2] * cs[2] / moms[1] + ss[2] * ss[2] / moms[0]);\n        Fs[1] = h * (1 / moms[0] - 1 / moms[1]) * ss[1] * ss[2] * cs[2];\n        Fs[2] = h * (1 / moms[2] - cs[2] * cs[2] / moms[1] - ss[2] * ss[2] / moms[0]) * cs[1];\n        let newOms = [];\n        newOms[0] = Fs[0] * ss[1] * ss[2] + Fs[1] * cs[2];\n        newOms[1] = Fs[0] * ss[1] * cs[2] - Fs[1] * ss[2];\n        newOms[2] = Fs[0] * cs[1] + Fs[2];\n        // newOms = newOms.map(elem => -elem);\n        setOms(newOms);\n        setOm2(newOms.reduce((om2, om) => om2 + om * om, 0));\n        let newOmfs = [];\n        newOmfs[0] = Fs[2] * ss[1] * ss[2] + Fs[1] * cs[0];\n        newOmfs[1] =-Fs[2] * ss[1] * cs[2] + Fs[1] * ss[0];\n        newOmfs[2] = Fs[2] * cs[1] + Fs[0];\n        // newOms = newOms.map(elem => -elem);\n        setOmfs(newOmfs);\n        setOmf2(newOmfs.reduce((om2, om) => om2 + om * om, 0));\n        let newLs = [...Ls];\n        newLs[0] = moms[0] * (Fs[0] * ss[1] * ss[2] + Fs[1] * cs[2]);\n        newLs[1] = moms[1] * (Fs[0] * ss[1] * cs[2] - Fs[1] * ss[2]);\n        newLs[2] = moms[2] * (Fs[0] * cs[1] + Fs[2]);\n        setLs(newLs);\n        setL2(newLs.reduce((L2, L) => L2 + L * L, 0));\n        setK(newLs.reduce((K, L, i) => K + L * oms[i], 0)/2);\n        return Fs;\n    }\n\n    const nextFs = (intFs, m) => {\n        let newThs = [...ths];\n        for (let i = 0; i < 3; i++) ths[i] += intFs[i] * dt / 1000 / m;\n        return Fs(ths);\n    }\n\n    const nextThs = _ => {\n        let Fs1 = Fs(ths);\n        let Fs2 = nextFs(Fs1, 2);\n        let Fs3 = nextFs(Fs2, 2);\n        let Fs4 = nextFs(Fs3, 1);\n        let nextThs = [...ths];\n        for (let i = 0; i < 3; i++) nextThs[i] += (Fs1[i] + Fs4[i] + 2 * (Fs2[i] + Fs3[i])) * dt/ 1000 / 6;\n        setThs(nextThs);\n    }\n\n    return (\n        <>\n            <button onClick={() => setRunning(!running)}>{running ? \"Stop\" : \"Start\"}</button>\n            <button onClick={() => setTime(0)}>Reset</button>\n            Time = {time.toFixed(2)} s\n            <table>\n                <thead>\n                    <tr>\n                        <th>Quantity</th>\n                        <th>x-comp</th>\n                        <th>y-comp</th>\n                        <th>z-comp</th>\n                        <th>magnit.</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>angles (rad)</td>\n                        <td><Input n={0} quantity={running ? ths[0] : thsInput[0]} handler={handlerTh} /></td>\n                        <td><Input n={1} quantity={running ? ths[1] : thsInput[1]} handler={handlerTh} /></td>\n                        <td><Input n={2} quantity={running ? ths[2] : thsInput[2]} handler={handlerTh} /></td>\n                        <td> - </td>\n                    </tr>\n                    <tr>\n                        <td>moments</td>\n                        <td><Input n={0} quantity={momsInput[0]} handler={handlerMom} /></td>\n                        <td><Input n={1} quantity={momsInput[1]} handler={handlerMom} /></td>\n                        <td><Input n={2} quantity={momsInput[2]} handler={handlerMom} /></td>\n                        <td> - </td>\n                    </tr>\n                    <tr>\n                        <td>(body) omega</td>\n                        <td>{Math.round(oms[0] * 1000) / 1000}</td>\n                        <td>{Math.round(oms[1] * 1000) / 1000}</td>\n                        <td>{Math.round(oms[2] * 1000) / 1000}</td>\n                        <td>{Math.round(Math.sqrt(om2) * 1000) / 1000}</td>\n                    </tr>\n                    <tr>\n                        <td>(fixed) omega</td>\n                        <td>{Math.round(omfs[0] * 1000) / 1000}</td>\n                        <td>{Math.round(omfs[1] * 1000) / 1000}</td>\n                        <td>{Math.round(omfs[2] * 1000) / 1000}</td>\n                        <td>{Math.round(Math.sqrt(omf2) * 1000) / 1000}</td>\n                    </tr>\n                    <tr>\n                        <td>ang. mom</td>\n                        <td>{Math.round(Ls[0] * 1000) / 1000}</td>\n                        <td>{Math.round(Ls[1] * 1000) / 1000}</td>\n                        <td>{Math.round(Ls[2] * 1000) / 1000}</td>\n                        <td>{Math.round(1000 * Math.sqrt(L2) / 1000)}</td>\n                    </tr>\n                    <tr>\n                        <td>KE</td><td></td><td></td><td></td><td>{Math.round(1000 * K) / 1000}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"container\" style={{height:`${ny}px`, width:`${nx}px`}}>\n                {xyzs.map((xyz, index) => (\n                    <Dot\n                        key={index}\n                        x={xyz[0][0] + nx / 2}\n                        y={xyz[0][1] + ny / 2}\n                        d={d}\n                        dashed={xyz[2]}\n                    />\n                ))}\n                {xyzs.map((xyz0, index0) => {\n                    return xyzs.filter(xyz1 => {\n                        let d = [];\n                        for (let i = 0; i < 3; i++) d.push(Math.abs(xyz0[1][i] - xyz1[1][i]));\n                        // replace the following via the use of d.reduce((neighbor, di) => ?\n                        let neighbor = false;\n                        for (let i = 0; i < 3; i++) {\n                            neighbor = neighbor || (d[i] === 1 && !d[(i + 1) % 3] && !d[(i + 2) % 3]);\n                        }\n                        return neighbor;\n                    }).map((xyz1, index1) => (\n                        <Line\n                            key={String(index0) + String(index1)}\n                            xi={xyz0[0][0] + nx / 2}\n                            yi={xyz0[0][1] + ny / 2}\n                            xf={xyz1[0][0] + nx / 2}\n                            yf={xyz1[0][1] + ny / 2}\n                            dashed={xyz0[2] || xyz1[2]}\n                        />\n                    ))\n\n                })}\n                <Line xi={nx / 2} yi={ny / 2} xf = {nx * oms[0] + nx / 2} yf = {nx * oms[1] + ny / 2} />\n                {/* <Line xi={nx / 2} yi={ny / 2} xf = {nx * omfs[0] + nx / 2} yf = {nx * omfs[1] + ny / 2} dashed={true} /> */}\n            </div>\n        </>\n    )\n}\nexport default App;\n","/Users/pknipp/Desktop/repos/rotation/src/Dot.js",[],"/Users/pknipp/Desktop/repos/rotation/src/Line.js",[],"/Users/pknipp/Desktop/repos/rotation/src/Input.js",[],["42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":7,"column":15,"nodeType":"50","messageId":"51","endLine":7,"endColumn":19},{"ruleId":"48","severity":1,"message":"52","line":12,"column":12,"nodeType":"50","messageId":"51","endLine":12,"endColumn":20},{"ruleId":"48","severity":1,"message":"53","line":12,"column":22,"nodeType":"50","messageId":"51","endLine":12,"endColumn":33},{"ruleId":"54","severity":1,"message":"55","line":121,"column":8,"nodeType":"56","endLine":121,"endColumn":10,"suggestions":"57"},{"ruleId":"54","severity":1,"message":"58","line":147,"column":8,"nodeType":"56","endLine":147,"endColumn":30,"suggestions":"59"},{"ruleId":"48","severity":1,"message":"60","line":187,"column":13,"nodeType":"50","messageId":"51","endLine":187,"endColumn":19},{"ruleId":"44","replacedBy":"61"},{"ruleId":"46","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'setH' is assigned a value but never used.","Identifier","unusedVar","'omsInput' is assigned a value but never used.","'setOmsInput' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'nz' and 'ths'. Either include them or remove the dependency array.","ArrayExpression",["65"],"React Hook useEffect has missing dependencies: 'nextThs' and 'ths'. Either include them or remove the dependency array.",["66"],"'newThs' is assigned a value but never used.",["63"],["64"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},{"desc":"69","fix":"70"},"Update the dependencies array to be: [nz, ths]",{"range":"71","text":"72"},"Update the dependencies array to be: [nextThs, running, ths, time, xyzs0]",{"range":"73","text":"74"},[4042,4044],"[nz, ths]",[4985,5007],"[nextThs, running, ths, time, xyzs0]"]