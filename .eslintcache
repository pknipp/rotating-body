[{"/Users/pknipp/Desktop/repos/react-frontend-template/src/index.js":"1","/Users/pknipp/Desktop/repos/react-frontend-template/src/App.js":"2","/Users/pknipp/Desktop/repos/rotation/src/index.js":"3","/Users/pknipp/Desktop/repos/rotation/src/App.js":"4","/Users/pknipp/Desktop/repos/rotation/src/Dot.js":"5","/Users/pknipp/Desktop/repos/rotation/src/Line.js":"6","/Users/pknipp/Desktop/repos/rotation/src/Input.js":"7","/Users/pknipp/Desktop/repos/rotation/src/Square.js":"8"},{"size":506,"mtime":1611765216984,"results":"9","hashOfConfig":"10"},{"size":64,"mtime":1611765000156,"results":"11","hashOfConfig":"10"},{"size":506,"mtime":1611765216984,"results":"12","hashOfConfig":"13"},{"size":16679,"mtime":1614831016313,"results":"14","hashOfConfig":"13"},{"size":345,"mtime":1614774532017,"results":"15","hashOfConfig":"13"},{"size":674,"mtime":1614532380732,"results":"16","hashOfConfig":"13"},{"size":277,"mtime":1614532380731,"results":"17","hashOfConfig":"13"},{"size":729,"mtime":1614859379819,"results":"18","hashOfConfig":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1s2inzs",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"oko4l6",{"filePath":"26","messages":"27","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/pknipp/Desktop/repos/react-frontend-template/src/index.js",[],"/Users/pknipp/Desktop/repos/react-frontend-template/src/App.js",[],"/Users/pknipp/Desktop/repos/rotation/src/index.js",[],["37","38"],"/Users/pknipp/Desktop/repos/rotation/src/App.js",["39","40","41","42","43","44","45","46","47","48","49"],"import React, { useState, useEffect } from \"react\";\nimport { EigenvalueDecomposition, Matrix } from \"ml-matrix\";\nimport Dot from \"./Dot\";\nimport Input from \"./Input\";\nimport Line from \"./Line\";\nimport Square from \"./Square\";\n\nconst App = () => {\n    const [h, setH] = useState(1);\n    const [thsInput, setThsInput] = useState([\"0.3\", \"0.6\", \"0.9\"]);\n    const [ths, setThs] = useState(thsInput.map(elem => Number(elem)));\n    const [momsInput, setMomsInput] = useState([\"1\", \"1.5\", \"2\"]);\n    const [moms, setMoms] = useState(momsInput.map(elem => Number(elem)));\n    const [omsInput, setOmsInput] = useState([\"\", \"\", \"\"]);\n    const [oms, setOms] = useState(omsInput.map(elem => Number(elem)));\n    const [omfs, setOmfs] = useState([0, 0, 0]);\n    const [Ls, setLs] = useState([0, 0, 0]);\n    const [labLs, setLabLs] = useState([0, 0, 0]);\n    const [om2, setOm2] = useState(0);\n    const [omf2, setOmf2] = useState(0);\n    const [L2, setL2] = useState(0);\n    const [K, setK] = useState(0);\n    // const [torques, setTorques] = useState([0, 0, 0]);\n    const [xyzs0, setXyzs0] = useState([]);\n    const [mids0, setMids0] = useState([]);\n    const [xyzs, setXyzs] = useState([]);\n    const [mids, setMids] = useState([]);\n    const [running, setRunning] = useState(false);\n    const [time, setTime] = useState(0);\n    const [angle, setAngle] = useState(0);\n    const [axisVec, setAxisVec] = useState([0, 0, 1]);\n    const [dAxis, setDAxis] = useState(9);\n\n    const nx = 700;\n    const ny = 700;\n    const nz = ny;\n    const d = 200;\n\n    // ODE-solver timestep in ms\n    const dt = 100;\n\n    // matrix multiplication: arr * vec\n    const mult1 = (arr, vec) => {\n        let vec2 = [];\n        for (let i = 0; i < 3; i++) {\n            let elem = 0;\n            for (let j = 0; j < 3; j++) elem += arr[i][j] * vec[j];\n            vec2.push(elem);\n        }\n        return vec2;\n    }\n\n    // matrix multiplication: arr1 * arr2\n    const mult2 = (arr1, arr2) => {\n        let arr3 = [];\n        for (let i = 0; i < 3; i++) {\n            let row = [];\n            for (let j = 0; j < 3; j++) {\n                let elem = 0;\n                for (let k = 0; k < 3; k++) elem += arr1[i][k] * arr2[k][j];\n                row.push(elem);\n            }\n            arr3.push(row);\n        }\n        return arr3;\n    }\n\n    const zRot = th => {\n        let [c, s] = [Math.cos(th), Math.sin(th)];\n        return [[c, s, 0], [-s, c, 0], [0, 0, 1]];\n    }\n    const xRot = th => {\n        let [c, s] = [Math.cos(th), Math.sin(th)];\n        return [[1, 0, 0], [0, c, s], [0, -s, c]];\n    }\n\n    const rot = ths => mult2(mult2(zRot(ths[2]), xRot(ths[1])), zRot(ths[0]));\n    const invRot=ths=> mult2(mult2(zRot(-ths[0]),xRot(-ths[1])), zRot(-ths[2]));\n    const rotX = [[1, 0, 0], [0, 0, 1], [0, -1, 0]];\n    const rotY = [[0, 0, -1], [0, 1, 0], [1, 0, 0]];\n\n    // const rotate = ths => {\n    //     const mat = rot(ths);\n    //     let trace = mat[0][0] + mat[1][1] + mat[2][2];\n    //     // let traceTh = Math.cos(ths[1]) + (1 + Math.cos(ths[1])) * Math.cos(ths[0] + ths[2]);\n    //     let angle = Math.acos((trace - 1) / 2);\n    //     let vectors = new EigenvalueDecomposition(new Matrix(mat)).eigenvectorMatrix.data;\n    //     let axisVector = vectors.map(row => row[2]);\n    //     let vec = vectors.map(row => row[0]);\n    //     let rVec = mult1(rot(ths), vec);\n    //     let rVecCrossVec = [rVec[1] * vec[2] - rVec[2] * vec[1],\n    //                         rVec[2] * vec[0] - rVec[0] * vec[2],\n    //                         rVec[0] * vec[1] - rVec[1] * vec[0]];\n    //     let dot = axisVector.reduce((dot, comp, i) => dot - comp * rVecCrossVec[i], 0);\n    //     angle *= Math.sign(dot);\n    //     return [angle, axisVector];\n    // }\n\n    // const determinant = mat => {\n    //     let det = mat[0][0] * (mat[1][1] * mat[2][2] -\n    //                        mat[2][1] * mat[1][2]) +\n    //           mat[0][1] * (mat[1][2] * mat[2][0] -\n    //                        mat[2][2] * mat[1][0]) +\n    //           mat[0][2] * (mat[1][0] * mat[2][1] -\n    //                        mat[2][0] * mat[1][1]);\n    //     return det;\n    // }\n\n    const handlerTh = e => {\n        let xyOrZ = Number(e.target.name);\n        let th =  e.target.value;\n        let newThsInput = [...thsInput]\n        let newThs = [...ths];\n        if (th === '-' || th === '.' || th === '-.') {\n            newThsInput[xyOrZ] = th;\n        } else {\n            if (isNaN(Number(th))) return;\n            newThsInput[xyOrZ] = th;\n            newThs[xyOrZ] = Number(th);\n        }\n        setThsInput(newThsInput);\n        setThs(newThs);\n        let newXyzs = JSON.parse(JSON.stringify(xyzs0));\n        xyzs0.forEach((xyz, i) => newXyzs[i][0] = mult1(rot(ths), xyz[0]));\n        setXyzs(newXyzs);\n        let newMids = JSON.parse(JSON.stringify(mids0));\n        mids0.forEach((mid, i) => newMids[i] = mult1(rot(ths), mid));\n        setMids(newMids);\n    };\n\n    const handlerMom = e => {\n        let xyOrZ = Number(e.target.name);\n        let mom = e.target.value;\n        let newMomsInput = [...momsInput];\n        let newMoms = [...moms];\n        if (mom === '-' || mom === '.' || mom === '-.') {\n            newMomsInput[xyOrZ] = mom;\n        } else {\n            if (isNaN(Number(mom))) return;\n            newMomsInput[xyOrZ] = mom;\n            newMoms[xyOrZ] = Number(mom);\n        }\n        setMomsInput(newMomsInput);\n        setMoms(newMoms);\n    };\n\n    useEffect(() => {\n        setMoms(momsInput.map(mom => Number(mom)));\n        const firstXyzs = [];\n        for (let i = 0; i < 2; i++) {\n            let x = (-1 + 2 * i) * (nx / 4);\n            for (let j = 0; j < 2; j++) {\n                let y = (-1 + 2 * j) * (ny / 4);\n                for (let k = 0; k < 2; k++) {\n                    let z = (-1 + 2 * k) * (nz / 4)\n                    firstXyzs.push([[x, y, z], [i, j, k]]);\n                }\n            }\n        }\n        setXyzs0(firstXyzs);\n        const firstMids = [];\n        for (let i = -1; i < 2; i += 2) {\n            firstMids.push([i * nx / 4, 0, 0]);\n            firstMids.push([0, i * nx / 4, 0]);\n            firstMids.push([0, 0, i * nx / 4]);\n        }\n        setMids0(firstMids);\n        let newThs = thsInput.map(th => Number(th));\n        setThs(newThs);\n        let newXyzs = JSON.parse(JSON.stringify(firstXyzs));\n        firstXyzs.forEach((xyz, i) => newXyzs[i][0] = mult1(rot(newThs), xyz[0]));\n        setXyzs(newXyzs);\n        let newMids = JSON.parse(JSON.stringify(firstMids));\n        firstMids.forEach((mid, i) => newMids[i] = mult1(rot(newThs), mid));\n        setMids(newMids);\n    }, []);\n\n    useEffect(() => {\n        let interval = null;\n        if (running) {\n            interval = setInterval(() => {\n                setTime(time + dt/1000);\n                nextThs();\n                let newXyzs = JSON.parse(JSON.stringify(xyzs0));\n                let iMin = 0;\n                let zMin = newXyzs[iMin][0][2];\n                xyzs0.forEach((xyz, i) => {\n                    newXyzs[i][0] = mult1(rot(ths), xyz[0]);\n                    newXyzs[i][2] = false;\n                    if (newXyzs[i][0][2] < zMin) {\n                        iMin = i;\n                        zMin = newXyzs[i][0][2];\n                    }\n                });\n                newXyzs[iMin][2] = true;\n                setXyzs(newXyzs);\n                let newMids = JSON.parse(JSON.stringify(mids0));\n                mids0.forEach((mid, i) => newMids[i] = mult1(rot(ths), mid));\n                setMids(newMids);\n\n                // const mat = mult2(rot(ths), rotY);\n                const mat = rot(ths);\n                let trace = mat[0][0] + mat[1][1] + mat[2][2];\n                let newAngle = Math.acos((trace - 1) / 2);\n                let vectors = new EigenvalueDecomposition(new Matrix(mat)).eigenvectorMatrix.transpose().data;\n                let dVectors = vectors.map(vector => mult1(mat, vector).map((comp, i) => comp - vector[i]));\n                let mags = dVectors.map(dVector => dVector.reduce((mag, comp) => mag + comp * comp, 0));\n                let min = mags.reduce((min, mag, i) => mag < min[1] ? [i, mag] : min, [-1, Infinity]);\n                let newAxisVec = vectors[min[0]];\n                let vec = vectors[(min[0] + 1) % 3];\n                let rVec = mult1(rot(ths), vec);\n                let rVecCrossVec = [rVec[1] * vec[2] - rVec[2] * vec[1],\n                                    rVec[2] * vec[0] - rVec[0] * vec[2],\n                                    rVec[0] * vec[1] - rVec[1] * vec[0]];\n                let dot = newAxisVec.reduce((dot, comp, i) => dot - comp * rVecCrossVec[i], 0);\n                newAngle *= Math.sign(dot);\n                setAngle(newAngle);\n                setAxisVec(newAxisVec);\n                let newDAxis = newAxisVec.map((comp, i) => mult1(mat, newAxisVec)[i] - comp);\n                newDAxis = newDAxis.reduce((mag2, comp) => mag2 + comp * comp, 0);\n                setDAxis(Math.sqrt(newDAxis));\n            }, dt);\n        } else if (!running && time !== 0) {\n            clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n    }, [running, time, xyzs0]);\n\n    const Fs = ths => {\n        // Following was used for symmetric rotor.\n        // let Fs = [oms[0], 0, oms[2]];\n        let cs = [];\n        let ss = [];\n        for (const th of ths) {\n            cs.push(Math.cos(th));\n            ss.push(Math.sin(th));\n        };\n        let Fs = []\n        Fs[0] = h * (cs[2] * cs[2] / moms[1] + ss[2] * ss[2] / moms[0]);\n        Fs[1] = h * (1 / moms[0] - 1 / moms[1]) * ss[1] * ss[2] * cs[2];\n        Fs[2] = h * (1 / moms[2] - cs[2] * cs[2] / moms[1] - ss[2] * ss[2] / moms[0]) * cs[1];\n        let newOms = [];\n        newOms[0] = Fs[0] * ss[1] * ss[2] + Fs[1] * cs[2];\n        newOms[1] = Fs[0] * ss[1] * cs[2] - Fs[1] * ss[2];\n        newOms[2] = Fs[0] * cs[1] + Fs[2];\n        // newOms = newOms.map(elem => -elem);\n        setOms(newOms);\n        setOm2(newOms.reduce((om2, om) => om2 + om * om, 0));\n        let newOmfs = [];\n        newOmfs[0] = Fs[2] * ss[1] * ss[2] + Fs[1] * cs[0];\n        newOmfs[1] =-Fs[2] * ss[1] * cs[2] + Fs[1] * ss[0];\n        newOmfs[2] = Fs[2] * cs[1] + Fs[0];\n        // newOms = newOms.map(elem => -elem);\n        setOmfs(newOmfs);\n        setOmf2(newOmfs.reduce((om2, om) => om2 + om * om, 0));\n        let newLs = newOms.map((om, i) => moms[i] * om);\n        setLs(newLs);\n        setL2(newLs.reduce((L2, L) => L2 + L * L, 0));\n        setLabLs(mult1(invRot(ths), newLs));\n        setK(newLs.reduce((K, L, i) => K + L * oms[i], 0)/2);\n        return Fs;\n    }\n\n    const nextFs = (intFs, m) => {\n        let newThs = [...ths];\n        for (let i = 0; i < 3; i++) ths[i] += intFs[i] * dt / 1000 / m;\n        return Fs(ths);\n    }\n\n    const nextThs = _ => {\n        let Fs1 = Fs(ths);\n        let Fs2 = nextFs(Fs1, 2);\n        let Fs3 = nextFs(Fs2, 2);\n        let Fs4 = nextFs(Fs3, 1);\n        let nextThs = [...ths];\n        for (let i = 0; i < 3; i++) nextThs[i] += (Fs1[i] + Fs4[i] + 2 * (Fs2[i] + Fs3[i])) * dt/ 1000 / 6;\n        setThs(nextThs);\n    }\n\n    return (\n        <>\n            <button onClick={() => setRunning(!running)}>{running ? \"Stop\" : \"Start\"}</button>\n            <button onClick={() => setTime(0)}>Reset</button>\n            Time = {time.toFixed(2)} s\n            <table>\n                <thead>\n                    <tr>\n                        <th>Quantity</th>\n                        <th>x-comp</th>\n                        <th>y-comp</th>\n                        <th>z-comp</th>\n                        <th>magnit.</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>angles (rad)</td>\n                        <td><Input n={0} quantity={running || time ? ths[0] : thsInput[0]} handler={handlerTh} /></td>\n                        <td><Input n={1} quantity={running || time ? ths[1] : thsInput[1]} handler={handlerTh} /></td>\n                        <td><Input n={2} quantity={running || time ? ths[2] : thsInput[2]} handler={handlerTh} /></td>\n                        <td> - </td>\n                    </tr>\n                    <tr>\n                        <td>moments</td>\n                        <td><Input n={0} quantity={momsInput[0]} handler={handlerMom} /></td>\n                        <td><Input n={1} quantity={momsInput[1]} handler={handlerMom} /></td>\n                        <td><Input n={2} quantity={momsInput[2]} handler={handlerMom} /></td>\n                        <td> - </td>\n                    </tr>\n                    <tr>\n                        <td>(body) omega</td>\n                        <td>{Math.round(oms[0] * 1000) / 1000}</td>\n                        <td>{Math.round(oms[1] * 1000) / 1000}</td>\n                        <td>{Math.round(oms[2] * 1000) / 1000}</td>\n                        <td>{Math.round(Math.sqrt(om2) * 1000) / 1000}</td>\n                    </tr>\n                    <tr>\n                        <td>(fixed) omega</td>\n                        <td>{Math.round(omfs[0] * 1000) / 1000}</td>\n                        <td>{Math.round(omfs[1] * 1000) / 1000}</td>\n                        <td>{Math.round(omfs[2] * 1000) / 1000}</td>\n                        <td>{Math.round(Math.sqrt(omf2) * 1000) / 1000}</td>\n                    </tr>\n                    <tr>\n                        <td>ang. mom</td>\n                        <td>{Math.round(labLs[0] * 1000) / 1000}</td>\n                        <td>{Math.round(labLs[1] * 1000) / 1000}</td>\n                        <td>{Math.round(labLs[2] * 1000) / 1000}</td>\n                        <td>{Math.round(1000 * Math.sqrt(L2) / 1000)}</td>\n                    </tr>\n                    <tr>\n                        <td>KE</td><td></td><td></td><td></td><td>{Math.round(1000 * K) / 1000}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <div className=\"container\" style={{height:`${ny}px`, width:`${nx}px`}}>\n                <Square key=\"green\" mid={mids[5]} nx={nx} ny={ny} angle={angle} axisVec={axisVec} />\n                <Square key=\"red\" mid={mids[2]} nx={nx} ny={ny} angle={angle} axisVec={axisVec} flip={true}/>\n                {/* <Square className=\"square\" mid={mids[5]} nx={nx} ny={ny} anglevec={rotate(ths)} flip={true}/> */}\n                {/* {xyzs.map((xyz, index) => (\n                    <Dot\n                        key={index}\n                        x={xyz[0][0] + nx / 2}\n                        y={xyz[0][1] + ny / 2}\n                        d={d}\n                        dashed={xyz[2]}\n                    />\n                ))} */}\n                {mids.map((mid, index) => (\n                // filter((mid, index) => index === 5).\n                    <>\n                    {/* <Dot\n                        key={index}\n                        x={mid[0] + nx / 2}\n                        y={mid[1] + ny / 2}\n                        d={d}\n                        // dashed={xyz[2]}\n                    /> */}\n                    {/* <Square key=\"index\" index=\"index\" mid={mids[index]} nx={nx} ny={ny} anglevec={rotate(ths)} /> */}\n                    </>\n                ))}\n                {xyzs.map((xyz0, index0) => {\n                    return xyzs.filter(xyz1 => {\n                        let d = [];\n                        for (let i = 0; i < 3; i++) d.push(Math.abs(xyz0[1][i] - xyz1[1][i]));\n                        // replace the following via the use of d.reduce((neighbor, di) => ?\n                        let neighbor = false;\n                        for (let i = 0; i < 3; i++) {\n                            neighbor = neighbor || (d[i] === 1 && !d[(i + 1) % 3] && !d[(i + 2) % 3]);\n                        }\n                        return neighbor;\n                    }).map((xyz1, index1) => (\n                        <Line\n                            key={String(index0) + String(index1)}\n                            xi={xyz0[0][0] + nx / 2}\n                            yi={xyz0[0][1] + ny / 2}\n                            xf={xyz1[0][0] + nx / 2}\n                            yf={xyz1[0][1] + ny / 2}\n                            dashed={xyz0[2] || xyz1[2]}\n                        />\n                    ))\n\n                })}\n                {/* <Line xi={nx / 2} yi={ny / 2} xf = {nx * oms[0] + nx / 2} yf = {nx * oms[1] + ny / 2} />\n                <Line xi={nx / 2} yi={ny / 2} xf = {nx * omfs[0] + nx / 2} yf = {nx * omfs[1] + ny / 2} dashed={true} /> */}\n                {/* <Line xi={nx / 2} yi={ny / 2} xf = {nx * axisVec[0] + nx / 2} yf = {ny * axisVec[1] + ny / 2} /> */}\n            </div>\n        </>\n    )\n}\nexport default App;\n","/Users/pknipp/Desktop/repos/rotation/src/Dot.js",[],"/Users/pknipp/Desktop/repos/rotation/src/Line.js",[],"/Users/pknipp/Desktop/repos/rotation/src/Input.js",[],"/Users/pknipp/Desktop/repos/rotation/src/Square.js",["50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":11},{"ruleId":"55","severity":1,"message":"59","line":9,"column":15,"nodeType":"57","messageId":"58","endLine":9,"endColumn":19},{"ruleId":"55","severity":1,"message":"60","line":14,"column":22,"nodeType":"57","messageId":"58","endLine":14,"endColumn":33},{"ruleId":"55","severity":1,"message":"61","line":17,"column":12,"nodeType":"57","messageId":"58","endLine":17,"endColumn":14},{"ruleId":"55","severity":1,"message":"62","line":32,"column":12,"nodeType":"57","messageId":"58","endLine":32,"endColumn":17},{"ruleId":"55","severity":1,"message":"63","line":37,"column":11,"nodeType":"57","messageId":"58","endLine":37,"endColumn":12},{"ruleId":"55","severity":1,"message":"64","line":79,"column":11,"nodeType":"57","messageId":"58","endLine":79,"endColumn":15},{"ruleId":"55","severity":1,"message":"65","line":80,"column":11,"nodeType":"57","messageId":"58","endLine":80,"endColumn":15},{"ruleId":"66","severity":1,"message":"67","line":176,"column":8,"nodeType":"68","endLine":176,"endColumn":10,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":227,"column":8,"nodeType":"68","endLine":227,"endColumn":30,"suggestions":"71"},{"ruleId":"55","severity":1,"message":"72","line":265,"column":13,"nodeType":"57","messageId":"58","endLine":265,"endColumn":19},{"ruleId":"55","severity":1,"message":"73","line":2,"column":9,"nodeType":"57","messageId":"58","endLine":2,"endColumn":15},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'Dot' is defined but never used.","Identifier","unusedVar","'setH' is assigned a value but never used.","'setOmsInput' is assigned a value but never used.","'Ls' is assigned a value but never used.","'dAxis' is assigned a value but never used.","'d' is assigned a value but never used.","'rotX' is assigned a value but never used.","'rotY' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'momsInput', 'nz', 'rot', and 'thsInput'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setMoms' needs the current value of 'momsInput'.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'mids0', 'nextThs', 'rot', and 'ths'. Either include them or remove the dependency array.",["77"],"'newThs' is assigned a value but never used.","'colors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"78","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [momsInput, nz, rot, thsInput]",{"range":"82","text":"83"},"Update the dependencies array to be: [mids0, nextThs, rot, running, ths, time, xyzs0]",{"range":"84","text":"85"},[6617,6619],"[momsInput, nz, rot, thsInput]",[9147,9169],"[mids0, nextThs, rot, running, ths, time, xyzs0]"]